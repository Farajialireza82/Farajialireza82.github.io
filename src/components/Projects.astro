---
import { siteConfig } from "../config";
import { createLazyImage } from "../utils/imageUtils";
const hasProjects = siteConfig.projects && siteConfig.projects.length > 0;
---

{
  hasProjects && (
    <section id="projects" class="p-8 sm:p-12 md:p-16 lg:p-24">
      <div>
        <div class="grid grid-cols-1 lg:grid-cols-12 gap-8 lg:gap-16 items-start">
          <div class="lg:col-span-5">
            <h2 class="text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-bold text-gray-900 leading-tight">
              Showcase
            </h2>
            <div
              class="w-[75px] h-[5px] mt-2 rounded-full"
              style={`background-color: ${siteConfig.accentColor}`}
            />
          </div>

          <div class="lg:col-span-7">
            <div class="space-y-8">
              {siteConfig.projects.map((project, index) => {
                return (
                  <div class="group relative">
                    <a
                      href={`/projects/${project.slug}`}
                      class="block relative p-4 sm:p-6 md:p-8 bg-gray-50 rounded-xl sm:rounded-2xl border border-gray-200 transition-all duration-300 hover:bg-white hover:shadow-xl hover:border-gray-300 hover:-translate-y-1"
                    >
                      <div class="absolute top-4 right-4 sm:top-6 sm:right-6 md:top-8 md:right-8 w-10 h-10 sm:w-11 sm:h-11 md:w-12 md:h-12 flex items-center justify-center bg-gray-900 rounded-full text-white transition-all duration-300 group-hover:bg-gray-700">
                        <svg
                          class="w-4 h-4 sm:w-4.5 sm:h-4.5 md:w-5 md:h-5 transition-transform duration-300 group-hover:translate-x-0.5 group-hover:-translate-y-0.5"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M9 5l7 7-7 7"
                          />
                        </svg>
                      </div>

                      <div class="flex gap-4 sm:gap-6">
                        <div class="flex-1 space-y-4">
                          <div>
                            <div class="flex items-center gap-2">
                              <span
                                class="text-sm font-mono"
                                style={{ color: siteConfig.accentColor }}
                              >
                                0{index + 1}
                              </span>
                            </div>
                            <div class="flex items-center gap-2">
                              <h3 class="text-xl sm:text-2xl font-bold text-gray-900">
                                {project.name}
                              </h3>
                              {project.featured && (
                                <div class="flex items-center justify-center w-5 h-5 rounded-full" style={`background-color: ${siteConfig.accentColor}`}>
                                  <svg class="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20" stroke-width="3">
                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" stroke="currentColor" stroke-width="2" />
                                  </svg>
                                </div>
                              )}
                            </div>
                          </div>

                          <div class="flex gap-4 sm:gap-6">
                            <p class="text-base sm:text-lg text-gray-600 leading-relaxed pr-12 sm:pr-14 md:pr-16 text-ellipsis-3-lines flex-1">
                              {project.description}
                            </p>

                            {project.screenshots && project.screenshots.length > 0 && (
                              <div class="hidden sm:block w-24 md:w-28 lg:w-32 flex-shrink-0">
                                <img
                                  {...createLazyImage(
                                    project.screenshots[0],
                                    project.thumbnails?.[0] || project.screenshots[0],
                                    `${project.name} preview`,
                                    "w-full aspect-square object-cover rounded-lg shadow-md transition-all duration-300 group-hover:shadow-lg opacity-0 transition-opacity duration-300",
                                    "lazy"
                                  )}
                                />
                              </div>
                            )}
                          </div>

                          {project.skills && project.skills.length > 0 && (
                            <div class="flex flex-wrap gap-1.5 sm:gap-2 pt-2">
                              {project.skills.map((skill) => (
                                <span class="px-2.5 sm:px-3 py-1 sm:py-1.5 bg-gray-900 text-white rounded-md sm:rounded-lg text-xs sm:text-sm font-medium transition-all duration-300 group-hover:bg-gray-800">
                                  {skill}
                                </span>
                              ))}
                            </div>
                          )}
                        </div>
                      </div>
                    </a>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

<script>
  import { loadFullImage } from "../utils/imageUtils";

  // Handle lazy loading for project images
  document.addEventListener('DOMContentLoaded', () => {
    const lazyImages = document.querySelectorAll('.lazy-image');
    
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          loadFullImage(img);
          observer.unobserve(img);
        }
      });
    });

    lazyImages.forEach(img => {
      imageObserver.observe(img);
    });
  });
</script>

<style>
  .lazy-image.loaded {
    opacity: 1 !important;
  }
</style>
