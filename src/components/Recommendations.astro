---
import { siteConfig } from "../config";
import { createLazyImage } from "../utils/imageUtils";
const hasRecommendations = siteConfig.recommendations && siteConfig.recommendations.length > 0;
---

{
  hasRecommendations && (
    <section id="recommendations" class="p-8 sm:p-12 md:p-16 lg:p-24 bg-gray-50">
      <div>
        <div>
          {/* Title and Subtitle */}
          <div class="mb-12">
            <h2 class="text-3xl sm:text-4xl md:text-5xl lg:text-5xl xl:text-6xl 2xl:text-7xl font-bold text-gray-900 leading-tight mb-8">
              Recommendations
            </h2>
            <div
              class="w-[75px] h-[5px] mt-2 rounded-full"
              style={`background-color: ${siteConfig.accentColor}`}
            />
            <p class="mt-6 text-lg text-gray-600">
              What colleagues and collaborators say about working with me
            </p>
          </div>

          {/* Horizontal scrolling recommendations */}
          <div class="relative group">
            {/* Fade gradients - positioned outside scrolling container */}
            <div class="absolute left-0 top-0 bottom-0 w-8 bg-gradient-to-r from-gray-50 to-transparent z-30 pointer-events-none"></div>
            <div class="absolute right-0 top-0 bottom-0 w-8 bg-gradient-to-l from-gray-50 to-transparent z-30 pointer-events-none"></div>
            
            {/* Horizontal scrolling container */}
            <div class="overflow-x-auto overflow-y-hidden relative scrollbar-hide" id="recommendations-container">
              <div class="flex space-x-4 sm:space-x-6 animate-scroll pb-4 group-hover:pause-animation" id="recommendations-scroll">
                {/* Duplicate recommendations for seamless loop */}
                {[...siteConfig.recommendations, ...siteConfig.recommendations, ...siteConfig.recommendations].map((rec, index) => (
                  <div class="flex-shrink-0 min-w-[32rem] sm:min-w-[40rem] max-w-[36rem] sm:max-w-[44rem] bg-white rounded-xl shadow-sm border border-gray-200 p-4 sm:p-6 hover:shadow-md transition-all duration-300 hover:-translate-y-1 flex flex-col h-[32rem]">
                    {/* Recommendation Header */}
                    <div class="flex items-start space-x-4 mb-4">
                      <div class="flex-shrink-0">
                        <div class="w-12 h-12 rounded-full overflow-hidden bg-gray-200">
                          <img 
                            {...createLazyImage(
                              rec.avatar,
                              rec.avatarThumbnail || rec.avatar,
                              `${rec.name} - ${rec.title}`,
                              "w-full h-full object-cover opacity-0 transition-opacity duration-300",
                              "lazy"
                            )}
                            onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                          />
                          <div class="w-full h-full bg-gray-300 flex items-center justify-center text-gray-600 font-semibold text-lg" style="display: none;">
                            {rec.name.split(' ').map(n => n[0]).join('')}
                          </div>
                        </div>
                      </div>
                      
                      <div class="flex-1 min-w-0">
                        <div class="flex flex-col">
                          <div>
                            <h3 class="text-lg font-semibold text-gray-900">
                              {rec.name}
                            </h3>
                            <p class="text-sm text-gray-600">
                              {rec.title}
                            </p>
                            <p 
                              class="text-sm font-medium"
                              style={`color: ${siteConfig.accentColor}`}
                            >
                              {rec.company}
                            </p>
                          </div>
                          <div class="mt-2">
                            <span class="text-xs text-gray-500">
                              {rec.date}
                            </span>
                            <p class="text-xs text-gray-400 mt-1">
                              {rec.connection}
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Recommendation Text */}
                    <div class="relative flex-1 overflow-hidden">
                      <div class="absolute -top-2 -left-2 text-4xl text-gray-200 select-none">"</div>
                      <blockquote class="text-gray-700 leading-relaxed pl-6 pt-2 h-full overflow-y-auto">
                        {rec.text}
                      </blockquote>
                      <div class="absolute -bottom-2 -right-2 text-4xl text-gray-200 select-none transform rotate-180">"</div>
                    </div>

                    {/* LinkedIn-style connection indicator */}
                    <div class="mt-4 pt-4 border-t border-gray-100 flex-shrink-0">
                      <div class="flex items-center space-x-2">
                        <svg class="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.14.925-2.064 2.065-2.064 1.14 0 2.064.925 2.064 2.064 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                        </svg>
                        <span class="text-sm text-gray-500">
                          LinkedIn Recommendation
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            {/* Pause on hover */}
            <div class="absolute inset-0 pointer-events-none"></div>
          </div>

          {/* Call to action */}
          <div class="mt-12 text-center">
            <p class="text-gray-600 mb-4">
              Want to see more recommendations?
            </p>
            <a 
              href={siteConfig.social?.linkedin}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center space-x-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-300"
            >
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.14.925-2.064 2.065-2.064 1.14 0 2.064.925 2.064 2.064 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
              </svg>
              <span>View on LinkedIn</span>
            </a>
          </div>
        </div>
      </div>
    </section>
  )
}

<script>
  import { loadFullImage } from "../utils/imageUtils";

  // Handle lazy loading for recommendation images
  function setupLazyLoading() {
    const lazyImages = document.querySelectorAll('.lazy-image');
    
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          loadFullImage(img);
          observer.unobserve(img);
        }
      });
    });

    lazyImages.forEach(img => {
      imageObserver.observe(img);
    });
  }

  // Infinite scroll for recommendations
  function setupInfiniteScroll() {
    const container = document.getElementById('recommendations-container');
    const scrollElement = document.getElementById('recommendations-scroll');
    
    if (!container || !scrollElement) return;
    
    const recommendations = document.querySelectorAll('#recommendations-scroll > div');
    const totalItems = recommendations.length;
    const itemsPerSet = totalItems / 3; // We have 3 sets of recommendations
    
    let isScrolling = false;
    let scrollTimeout;
    
    // Function to reset scroll position seamlessly
    function resetScrollPosition() {
      if (isScrolling) return;
      
      const scrollLeft = container.scrollLeft;
      const itemWidth = recommendations[0].offsetWidth + 24; // width + gap
      const setWidth = itemWidth * itemsPerSet;
      
      // If we're in the second set (middle), reset to first set
      if (scrollLeft >= setWidth && scrollLeft < setWidth * 2) {
        container.scrollLeft = scrollLeft - setWidth;
      }
      // If we're in the third set (end), reset to first set
      else if (scrollLeft >= setWidth * 2) {
        container.scrollLeft = scrollLeft - (setWidth * 2);
      }
    }
    
    // Handle scroll events
    container.addEventListener('scroll', () => {
      isScrolling = true;
      clearTimeout(scrollTimeout);
      
      // Reset scroll position after a short delay
      scrollTimeout = setTimeout(() => {
        resetScrollPosition();
        isScrolling = false;
      }, 150);
    });
    
    // Handle wheel events for smooth infinite scrolling
    container.addEventListener('wheel', (e) => {
      e.preventDefault();
      
      const delta = e.deltaX || e.deltaY;
      const currentScroll = container.scrollLeft;
      const itemWidth = recommendations[0].offsetWidth + 24;
      const setWidth = itemWidth * itemsPerSet;
      
      // Calculate new scroll position
      let newScroll = currentScroll + delta;
      
      // Handle infinite loop
      if (newScroll < 0) {
        newScroll = setWidth * 2 + newScroll; // Go to end of second set
      } else if (newScroll >= setWidth * 2) {
        newScroll = newScroll - (setWidth * 2); // Go to beginning
      }
      
      container.scrollLeft = newScroll;
    }, { passive: false });
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    setupLazyLoading();
    setupInfiniteScroll();
  });
</script>

<style>
  .lazy-image.loaded {
    opacity: 1 !important;
  }
</style>
