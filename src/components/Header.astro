---
import { siteConfig } from "../config";

const hasProjects = siteConfig.projects && siteConfig.projects.length > 0;
const hasExperience = siteConfig.experience && siteConfig.experience.length > 0;
const hasEducation = siteConfig.education && siteConfig.education.length > 0;
const hasRecommendations = siteConfig.recommendations && siteConfig.recommendations.length > 0;

// Check if we're on a detail page (not the main page)
const isDetailPage = typeof window !== 'undefined' && !window.location.pathname.endsWith('/');
---

<header
  id="header"
  class="fixed top-0 left-0 right-0 z-50 hidden md:block transition-all duration-300"
>
  <nav class="max-w-7xl mx-auto px-8 py-4">
    <ul class="flex items-center gap-8 justify-center">
      <li>
        <a
          href="/#about"
          class="text-gray-700 hover:text-black transition-colors font-medium"
        >
          About
        </a>
      </li>
      {
        hasProjects && (
          <li>
            <a
              href="/#projects"
              class="text-gray-700 hover:text-black transition-colors font-medium"
            >
              Projects
            </a>
          </li>
        )
      }
      {
        hasExperience && (
          <li>
            <a
              href="/#experience"
              class="text-gray-700 hover:text-black transition-colors font-medium"
            >
              Experience
            </a>
          </li>
        )
      }
      {
        hasEducation && (
          <li>
            <a
              href="/#education"
              class="text-gray-700 hover:text-black transition-colors font-medium"
            >
              Education
            </a>
          </li>
        )
      }
      {
        hasRecommendations && (
          <li>
            <a
              href="/#recommendations"
              class="text-gray-700 hover:text-black transition-colors font-medium"
            >
              Recommendations
            </a>
          </li>
        )
      }
    </ul>
  </nav>
</header>

<script>
  // Scroll state preservation
  let scrollPosition = 0;
  
  // Save scroll position when navigating away
  function saveScrollPosition() {
    scrollPosition = window.scrollY;
    sessionStorage.setItem('scrollPosition', scrollPosition.toString());
  }
  
  // Restore scroll position when returning to main page
  function restoreScrollPosition() {
    const savedPosition = sessionStorage.getItem('scrollPosition');
    if (savedPosition) {
      const position = parseInt(savedPosition);
      if (position > 0) {
        // Use instant scrolling to prevent visual jumps
        window.scrollTo(0, position);
        sessionStorage.removeItem('scrollPosition');
      }
    }
  }
  
  // Handle navigation clicks
  document.addEventListener('click', (e) => {
    const link = e.target.closest('a[href^="/#"]');
    if (link) {
      saveScrollPosition();
    }
    
    // Handle clicks on project/experience links
    const projectLink = e.target.closest('a[href^="/projects/"]');
    const experienceLink = e.target.closest('a[href^="/experience/"]');
    if (projectLink || experienceLink) {
      saveScrollPosition();
    }
  });
  
  // Restore scroll position immediately to prevent flicker
  function restoreScrollImmediately() {
    if (window.location.pathname === '/') {
      const savedPosition = sessionStorage.getItem('scrollPosition');
      if (savedPosition) {
        const position = parseInt(savedPosition);
        if (position > 0) {
          // Restore scroll position immediately
          window.scrollTo(0, position);
          sessionStorage.removeItem('scrollPosition');
          return true; // Indicate restoration happened
        }
      }
    }
    return false;
  }
  
  // Run immediately when script loads
  const wasRestored = restoreScrollImmediately();
  
  // Additional restoration on DOM ready for extra safety (only if not already restored)
  document.addEventListener('DOMContentLoaded', () => {
    if (window.location.pathname === '/' && !wasRestored) {
      restoreScrollPosition();
    }
  });
  
  // Handle back button
  window.addEventListener('popstate', () => {
    if (window.location.pathname === '/') {
      restoreScrollPosition();
    }
  });
  
  // Header scroll effect
  window.addEventListener("scroll", () => {
    const header = document.getElementById("header");
    if (window.scrollY > 100) {
      header?.classList.add("bg-white/80", "backdrop-blur-sm");
    } else {
      header?.classList.remove("bg-white/80", "backdrop-blur-sm");
    }
  });
</script>

<style>
  html {
    scroll-behavior: smooth;
  }
  
  /* Prevent flash of unstyled content during scroll restoration */
  body {
    transition: none !important;
  }
  
  /* Ensure smooth scrolling for programmatic scrolls */
  html {
    scroll-behavior: auto;
  }
  
  /* Smooth scrolling only for user interactions */
  html:not(.no-smooth-scroll) {
    scroll-behavior: smooth;
  }
</style>
